---
type Props = {
  summary: string;
  children: any;
};
const { summary } = Astro.props;
---

<details>
  <summary>{summary}</summary>
  <div class="content">
    <div class="content__inner">
      <slot />
    </div>
  </div>
</details>

<script>
  /**
   * アニメーションの時間とイージング
   */
  const animTiming = {
    duration: 400,
    easing: "ease-in-out",
  };

  /**
   * アコーディオンを閉じるときのキーフレーム
   */
  const closingAnimKeyframes = (content: HTMLElement) => [
    {
      height: content.offsetHeight + "px", // height: "auto"だとうまく計算されないため要素の高さを指定する
      opacity: 1,
      transform: "scale(1)",
    },
    {
      height: 0,
      opacity: 0,
      transform: "scale(0.8)",
    },
  ];

  /**
   * アコーディオンを開くときのキーフレーム
   */
  const openingAnimKeyframes = (content: HTMLElement) => [
    {
      height: 0,
      opacity: 0,
      transform: "scale(0.8)",
    },
    {
      height: content.offsetHeight + "px",
      opacity: 1,
      transform: "scale(1)",
    },
  ];

  function hoge() {
    const details = document.querySelector<HTMLElement>("details");
    const summary = document.querySelector<HTMLElement>("summary");
    const content = document.querySelector<HTMLElement>(".content");

    if (!details || !summary || !content) {
      console.log("Some Elements missed");
      return;
    }
    summary.addEventListener("click", (event) => {
      event.preventDefault();
      details.classList.toggle("expanded");

      if (details.getAttribute("open")) {
        console.log("uio");

        const closingAnimation = content.animate(
          closingAnimKeyframes(content),
          animTiming
        );

        closingAnimation.onfinish = () => {
          /* open属性を消すと途端にアコーディオンが閉じてしまう */
          details.removeAttribute("open");
        };
      } else {
        console.log("ai");
        /* open属性を付与しないとアコーディオンが開かない */
        details.setAttribute("open", "true");

        const openingAnimation = content.animate(
          openingAnimKeyframes(content),
          animTiming
        );
      }
    });
  }
  hoge();
</script>

<style>
  details {
    border: 1px solid #e28235;
    filter: drop-shadow(0px 2px 2px rgba(0, 0, 0, 0.25));
    border-radius: 7px;
    background-color: #f5f5f5;
    overflow: hidden;
    margin: 1rem 0;
  }
  summary {
    font-size: 16px;
    cursor: pointer;
    display: flex;
    align-items: center;
    padding-left: 2ch;
    gap: 1ch;
    transition: background-color 0.3s ease-out;
  }
  summary::before {
    content: "▶";
    color: #e28235;
    display: inline-block;
    font-size: 0.5rem;
    transition: transform 0.3s ease-in-out;
  }

  details.expanded > summary::before {
    transform: rotate(90deg);
    transition: transform 0.3s ease-in-out;
  }

  summary,
  .content__inner {
    padding: 8px 16px;
  }

  details[open] > summary {
    background-color: #e5e5e5;
    transition: background-color 0.3s ease-out;
  }

  details > .content {
    font-size: 0.8rem;
  }
</style>
